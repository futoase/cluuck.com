---
title: "tuningathon 20120701"
date: 2012-07-02 18:36
comments: true
tags: [tuningathon, Ruby On Rails, Infrastructure]
---

# tuningathon #4に参加しました。

[チューニンガソン #4](http://www.zusaar.com/event/312053)に参加しました。
転職先の職場ではインフラエンジニアよりの仕事をしているため、良い機会だと思い参加を決めました。

# tuningathon #4のお題

[Ruby on Rails](http://rubyonrails.org/)製のCMS [Refinery](http://refinerycms.com/) に対する書き込み and 読み込み(Viewの描画)を含め、アプリ側の
ソースコードには手を触れず(database.ymlとconfig/environments/development.rbの設定ファイルは除く)、
サーバサイド側の環境の改善だけでパフォマンスをあげていく、という内容です。

## お題の測定

お題の測定については、パフォーマンス測定兼スコアリングスクリプトを実行し、サービスに対し
コメントを記入、コメントの描画(取得)を行うというものでした。

## チューニンガソン開始時のアプリケーション実行環境

実行環境については以下のとおりです。

- Amazon EC2 c1.mediumインスタンス 
    - ap-southeast-1 リージョン(シンガポール)
    - AMI 2012-03 x86_64
- MySQL  5.5.20 (EC2インスタンス内にてインストール)    
- ruby 1.8.7
- 計測対象のアプリケーションRefineryはインストール済

以下、計測スクリプトで都度パフォーマンス計測をしながら改善を行った結果を書き出します。

READMORE

1. webrickを利用して計測した結果

```plain:performed-using-the-webrick
Score: 2.428 (get=1.200, comment=1.228(2), check=1.000)
```

かなり低い。

2. アプリケーションサーバを[unicorn](http://unicorn.bogomips.org/)に変更し、計測した結果

```plain:performed-using-the-unicorn
Score: 3.863 (get=2.100, comment=1.763(2), check=1.000)
```

すこし上がった

3. rubyの処理系を[REE(2012 02)](http://www.rubyenterpriseedition.com/)に変更し、計測した結果

```plain:performed-using-the-ree
Score: 13.786 (get=8.400, comment=5.386(6), check=1.000)
```

10を超えた

4. MySQLの設定(my.cnf)に最低限の設定を行い、ruby処理系を1.9.3p194に変え計測した結果

```plain:tuning-of-final
Score: 21.684 (get=14.100, comment=7.584(8), check=1.000)
```

20を超えた

# 結果

スコアの結果、4位入賞となりました。

# 調整を行った内容

- rubyの処理系を1.8.7から1.9.3p194に変更した
    - REE 2012.02 よりもスコアがました。長期運用ではことなるかも。
- MySQLでのmy.cnfの設定を最低限施した

```plain:setting-of-my.cnf
[mysqld]
innodb_buffer_pool_size=512M
innodb_log_file_size=128M
innodb_log_buffer_size=32M
sort_buffer_size=2M
read_rnd_buffer_size=2M
join_buffer_size=2M
read_buffer_size=2M
key_buffer_size=256M
```

- nginx + unicornというproxy + アプリケーションという構成にした
    - nginxについてはmemcached側にキャッシュを入れる形で設定をした


# TOPの方々

TOPだった方々はスコアが1000を超えており、異常だった。理由を聞いてみたところ
[varnish](https://www.varnish-cache.org/)を使う & 計測スクリプトの
POSTとGET(POSTをされるとキャッシュがpurgeされてしまう)の内容を確認、
且つアプリケーション側へのリクエストを見て、POSTの後のGET回数が一定なので
GET分、POSTにしくじってもスコアを稼げると判断し、varnishの設定を行ったらしい。
アプリケーションの負荷軽減についてユーザーパターンのチェックを行うことで
最適な状態に持っていけるんだな(当たり前だけど)ということを思いました。


# 次

次があったらまた参加したいですね
